---
jupyter: python3
---

```{python}
import numpy as np
import pandas as pd
import openai
import configparser
# from numpy.random import default_rng
# from numpy.random import Generator as rg

config = configparser.ConfigParser()
config.read("config.ini")
api_key = config.get('Keys','openai_api_key')

openai.api_key = api_key
```

```{python}
def get_gpt_text(response):

    choices = response["choices"]
  
    if type(choices)==list:
        out = [x['text'] for x in choices]
    else: 
        out = choices['text']
    
    return(out)



def make_prompt(query, base_prompt, suffix=""):
    if type(query)==list:
        output = [base_prompt + q + suffix for q in query]
    else:
        output = base_prompt + query + suffix

    return(output)


def gpt_complete_batch(questions, prompt, suffix = "", **kwargs): #  , max_tokens=12, stop=None
  
  # need to add batching into groups of 20 prompts

    response = openai.Completion.create(
        model="text-davinci-003",
        prompt= make_prompt(questions, prompt, suffix),
        # temperature=0,
        # top_p=1,
        # frequency_penalty=0,
        # presence_penalty=0,
        **kwargs
        # max_tokens=max_tokens,
        # stop = stop
    )

    full_text = get_gpt_text(response)

    out = [s.strip() for s in full_text]

    return(out)


def batch_function(x, func, batch_size=20):
    
    batches = [x[i:i+batch_size] for i in range(0, len(x), batch_size)] # batch into lists of 20
    # print(batches)
    out = list()

    for b in batches:
        val = func(b)
        out.append(val)

    return(out)



def gpt_complete(questions, prompt="", suffix = "", **kwargs):

    if type(questions)==list:
  
        questions_list = [questions[i:i+20] for i in range(0, len(questions), 20)] # batch into lists of 20
        # should make this a for loop and sleep a bit in between batches
        response_list = [gpt_complete_batch(q, prompt, suffix, **kwargs) for q in questions_list] 
        
        out = list()

        for sub_list in response_list:
            out = out + sub_list

    else:
        out = gpt_complete_batch(questions, prompt, suffix, **kwargs)

    return(out)


import re 

def get_text_answer(string, prefix="A:"):
    regex_string = prefix + r"\W*(\d+)"
    regex = re.compile(regex_string) 
    match = regex.search(string) 

    return(match.group(1))

```

Let's start with rules all based on addition and subtraction. I'll try to make first-order and second-order digit matrices. 

- For first-order, there is a hidden summand that determines the number in each successive row.
- For second-order, there are two hidden summands that determine the number in each successive row. The first is applied in row 2, then the second is applied to the summand in row 3 (and again in row 4 if doing a 4 row matrix).

One key is that at least one thing must be different on each row, either the summands or the starting value, to avoid any direct matching.

```{python}
## functions for making additive first-order digit matrices

def make_np_matrix(svals, summands):
    # svals: numpy vector of starting values
    # summands: numpy vector of integer summands

    dims = (len(svals), len(svals))
    x = np.broadcast_to(np.array([svals]).T, dims)
    summands = np.broadcast_to(np.array([summands]).T, dims)

    adder_mat = np.broadcast_to(np.arange(0, dims[0]), dims)

    return(x + adder_mat*summands)


def apply_summands(start, s1, s2, rows=4):
    # apply summands, where each is incremented from the last
    out = [start]*rows
    for r in range(1, rows):
        out[r] = out[r-1] + s1 + s2*(r-1)

    return(out)



def apply_summands_mult(start, s1, s2, rows=4):
    # apply summands, where each is a multiple of the last
    out = [start]*rows
    for r in range(1, rows):
        out[r] = out[r-1] + s1 * s2**(r-1)

    return(out)   


# def make_np_matrix_2ndorder_mult(svals, s1s, s2, rows=4):

#     x = [apply_summands_mult(svals[i], s1s[i], s2, rows) for i in range(0, len(svals))]

#     return(np.array(x))

    

def make_np_matrix_2ndorder(svals, s1s, s2, rows=4):

    x = [apply_summands(svals[i], s1s[i], s2, rows) for i in range(0, len(svals))]

    return(np.array(x))
    

def make_np_matrix_2ndorder_mult(svals, s1s, s2, rows=4):

    x = [apply_summands_mult(svals[i], s1s[i], s2, rows) for i in range(0, len(svals))]

    return(np.array(x))


def format_matrix_row(row):
    return(" ".join(["[ " + str(i) + " ]" for i in row]))


# def mask_formatted_digit_matrix(m):
#     # return(m[:-3] + "? ]")
#     m = m

#     return(m)


def format_digit_matrix(m, mask=None):

    mat_list = [list(i) for i in m]

    if mask is None:
        string_out = "\n".join([format_matrix_row(r) for r in mat_list])

    else:
        mat_list[-1] = mat_list[-1][:-1]
        string_out = "\n".join([format_matrix_row(r) for r in mat_list])
        string_out = string_out + mask

    return(string_out)



# format_digit_matrix(make_np_matrix_2ndorder(np.array([1,3,6]), 3, 1), "[ ? ]")
```

Appears to zero-shot with no prompt. Here's a little bit of code to ask about a random digit matrix

```{python}
# vals = np.random.randint(0, 9, 3).T
# summand = np.random.randint(1,5)
# m = make_np_matrix(vals, summand)

# question = format_digit_matrix(m, "[")
# answer = str(m[-1, -1])
# make_prompt(question, "")
# gpt_answer = gpt_complete(question, "", stop=["]", "\n"])

# print(question)
# print(gpt_answer)
# print(answer.strip("[] "))
# gpt_answer[0]==answer

```

Here's some code to make many digit matrices. I need to add a few things

- proper random seeding to be reproducible
- make it easier to get zero-shot "basic" and the formatted versions of the questions
- explore larger range
- make sure each matrix is properly challenging
- remove any duplicates (should be rare)

```{python}
rng = np.random.default_rng(12345)

n_questions = 100

def generate_qa(n, rng):
    questions = list()
    questions_basic = list()
    answers = list()
    complete = list()

    for i in range(0, n):

        vals = rng.integers(0, 20, 3).T #(-, 9, 3)
        s1 = rng.integers(0,9, 3).T # ( 1, 5, 3)
        s2 = rng.integers(1,4) # (1, 3)
        
        m = make_np_matrix_2ndorder(vals, s1, s2)
        
        complete.append(format_digit_matrix(m, None))
        questions.append(format_digit_matrix(m, " [ ? ]"))
        questions_basic.append(format_digit_matrix(m, " ["))
        answers.append(str(m[-1, -1]))

    return(questions, questions_basic, answers, complete)


questions, questions_basic, answers, complete = generate_qa(n_questions, rng)


```

```{python}
def make_examples_prompt(examples):
    return("\n\n".join(examples) + "\n\n")

examples = generate_qa(4, np.random.default_rng(322))[3]
examples_prompt = make_examples_prompt(examples)
```

```{python}
gpt_answers_basic = gpt_complete(
    questions_basic, 
    "",
    # cot_scaffolded_prompt, 
    # "\n\nLet's take it step by step and hypothesize what the pattern could be.",
    max_tokens = 12,
    stop = ["]", "\n"],
    temperature = 0
)
```

```{python}
gpt_answers_examples = gpt_complete(
    questions_basic, 
    examples_prompt,
    # cot_scaffolded_prompt, 
    # "\n\nLet's take it step by step and hypothesize what the pattern could be.",
    max_tokens = 12,
    stop = ["]", "\n"],
    temperature = 0
)
```

```{python}
cot_scaffolded_prompt = "Let's play a pattern-matching quiz game meant to test your ability to reason about relationships and make analogies. They might seem tricky but all of the questions can be answered from the information provided, so give an answer.\n\nQ: Based on the pattern in the matrix below, what number would best complete the pattern in the place of the \nquestion mark?\n\n[ 1 ] [ 3 ] [ 6 ] [ 10 ]\n[ 2 ] [ 3 ] [ 5 ] [ 8 ]\n[ 1 ] [ 2 ] [ 4 ] [ ? ]\n\nLet's take it step by step and hypothesize what the pattern could be. It looks like a shifting pattern. \n\n- In the first row, 3 - 1 = 2, 6 - 3 =3, and 10-6 = 4. So the summands are 2, 3, and 4, increasing by one each time. \n- In the second row, 3 -2 = 1, 5 - 3 = 2, 8-5 = 3. So the summands are 1, 2, and 3, again increasing by one each time.\n- In the third row, 2 - 1 =1, 4 - 2 = 2. So the summands are 1, 2. If they are increasing by one each time, then and 2 + 1 = 3, so the third summand is equal to 3.\n\nWe take the third column of third row and add the third summand, to calculate that 3 + 4 = 7\n\nA: 7\n\nQ: Based on the pattern in the matrix below, what number would best complete the pattern in the place of the question mark?\n\n"

gpt_answers = gpt_complete(
    questions, 
    cot_scaffolded_prompt, 
    "\n\nLet's take it step by step and hypothesize what the pattern could be.",
    max_tokens = 300,
    temperature = 0
)
```

It looks like, when spoon fed a the pattern, GPT3 can replicate it! But it can't seem to detect the pattern itself. Could it identify from among several patterns?

```{python}
df = pd.DataFrame(
    { 
        "matrix": questions,
        "answer": answers,
        "gpt_cot": [get_text_answer(a) for a in gpt_answers],
        "gpt_base": [a for a in gpt_answers_basic],
        "gpt_fewshot": [a for a in gpt_answers_examples]
    }
)

df = df.assign(cot_acc = df.answer == df.gpt_cot, base_acc = df.answer == df.gpt_base, few_acc = df.answer == df.gpt_fewshot)

df
```

```{python}
print("Accuracy (base):", np.mean(df.base_acc))
print("Accuracy (fewshot):", np.mean(df.few_acc))
print("Accuracy (COT):", np.mean(df.cot_acc))
```


Could it matter how you set up the "substrate" that it is using to "think" aloud? E.g. 2 + 3 = 5 requires the operator to be predicted before the slots are all filled. If you want it to predict the operator, could try something like (2, 3; 5)sum or something like that? Maybe pretrain it to teach it the mapping

Translation for scratchpad

```
We will use ()add, ()subtract, ()multiply and ()divide to represent addition, subtraction, and multiplication operations and their result. The following examples demonstrate how to translate to this format:

1 + 2 = 3 --> (1,2;3)add
4 - 2 = 2 --> (4, 2; 2)subtract
4 * 5 = 20 --> (4, 5; 20)multiply
24 / 4 = 6 --> (24, 4; 6)divide

Now we can solve the type of operation being described.

(2, 12; 24)___ ? --> multiply
(16, 3; 13)___ ? --> subtract
(2, 2; 4)___ ? --> add or multiply
(4, 2; 2)___ ? -->
```

Some other things from f Chollet's [twitter thread](https://twitter.com/fchollet/status/1624817201906868225) on ARC and GPT-3.

One thing is it seems like GPT-3 can't count, but it sort of gets things right otherwise:

[ x x x O x x x ] [ x x O O O x x ]
[ z z F z z ] [ z F F F z ]
[ i i i i i i i i i i i Z i i i i i i i i i i i ] [ i i i i i i i i i i Z Z Z i i i i i i i i i i ]
[ e e e e e A e e e e e ] [ e e e e A A A e e e ] (sort of right)


I could 

### some stray thoughts

2 and 3 rule problems not really higher-order

GPT-3 seems to struggle a bit with progressions and with permuted logic problems. In both cases it is making the correspondences trickier to track. This seems to be the tricky thing in a lot of relational reasoning problems, doing the mappings and knowing what is a "thing."

As a general mechanism for creating higher-order problems, could introduce same-different as the 2nd order relations.

Could teaching (via prompting) same different in one context generalize to other 1st-order relations?

```{python}


# vals = rng.integers(0, 20, 3).T #(-, 9, 3)
# s1 = rng.integers(1, 9, 3).T # ( 1, 5, 3)
# s2 = rng.integers(1,3) # (1, 3)

# make_np_matrix_2ndorder_mult(np.array([1, 2, 3]), np.array([1, 2, 1]), 2)
# make_np_matrix_2ndorder_mult(vals, s1, s2)
```

```{python}


def generate_qa_mult(n, rng):
    questions = list()
    questions_basic = list()
    answers = list()
    complete = list()

    for i in range(0, n):

        vals = rng.integers(0, 20, 3).T #(-, 9, 3)
        s1 = rng.integers(0,6, 3).T # ( 1, 5, 3)
        s2 = rng.integers(1,3) # (1, 3)
        
        m = make_np_matrix_2ndorder_mult(vals, s1, s2)
        
        complete.append(format_digit_matrix(m, None))
        questions.append(format_digit_matrix(m, "[ ? ]"))
        questions_basic.append(format_digit_matrix(m, "["))
        answers.append(str(m[-1, -1]))

    return(questions, questions_basic, answers, complete)


questions_m, questions_basic_m, answers_m, complete_m = generate_qa_mult(n_questions, rng)
```


```{python}
gpt_answers_basic_m = gpt_complete(
    questions_basic_m, 
    "",
    # cot_scaffolded_prompt, 
    # "\n\nLet's take it step by step and hypothesize what the pattern could be.",
    max_tokens = 12,
    stop = ["]", "\n"],
    temperature = 0
)
```

```{python}
examples_m = generate_qa_mult(4, np.random.default_rng(322))[3]
examples_prompt_m = make_examples_prompt(examples_m) + make_examples_prompt(examples)

# print(examples_prompt_m)
```

```{python}
gpt_answers_examples_m = gpt_complete(
    questions_basic_m, 
    examples_prompt_m,
    # cot_scaffolded_prompt, 
    # "\n\nLet's take it step by step and hypothesize what the pattern could be.",
    max_tokens = 12,
    stop = ["]", "\n"],
    temperature = 0
)
```

```{python}
cot_scaffolded_prompt_mult = "Let's play a pattern-matching quiz game meant to test your ability to reason about relationships and make analogies. They might seem tricky but all of the questions can be answered from the information provided, so give an answer.\n\nQ: Based on the pattern in the matrix below, what number would best complete the pattern in the place of the \nquestion mark?\n\n[ 4 ] [ 6 ] [ 10 ] [ 18 ]\n[ 16 ] [ 20 ] [ 28 ] [ 44 ]\n[ 11 ] [ 13 ] [ 17 ] [ ? ]\n\nLet's take it step by step and hypothesize what the pattern could be.\n\n- In the first row, 6 - 4 = 2, 10 - 6 = 4, and 18 - 10 = 8, so the summands are 2, 4, and 8, multiplying by two each time.\n- In the second row, 20 - 16 = 4, 28 - 20 = 8, 44 - 28 = 16, so the summands are 4, 8 and 6, again multiplying by two each time.\n- In the third row, 13 - 11 = 2, 17 - 13 = 4, so the first two summands are 2 and 4. If they multiply by two each time, the last summand is 8.\n\nWe take the third column of third row and add the final summand to calculate 17 + 8 = 25\nA: 25\n\n"

# gpt_answers_m = gpt_complete(
#     questions_m, 
#     cot_scaffolded_prompt_mult, 
#     "\n\nLet's take it step by step and hypothesize what the pattern could be.",
#     max_tokens = 350,
#     temperature = 0
# )
```

```{python}
df2 = pd.DataFrame(
    { 
        "matrix": questions_m,
        "answer": answers_m,
        "gpt_cot": [get_text_answer(a) for a in gpt_answers_m],
        "gpt_base": [a for a in gpt_answers_basic_m],
        "gpt_fewshot": [a for a in gpt_answers_examples_m]
    }
)

df2 = df2.assign(
    cot_acc = df.answer == df.gpt_cot, 
    base_acc = df.answer == df.gpt_base, 
    few_acc = df.answer == df.gpt_fewshot
    )

df2
```

```{python}
# def get_text_answer(string, prefix="A:"):
#     regex_string = prefix + r"\W*(\d+)"
#     regex = re.compile(regex_string) 
#     match = regex.search(string) 

#     return(match.group(1))

# [get_text_answer(a) for a in gpt_answers_m]

# get_text_answer(gpt_answers_m[7])
# gpt_answers_m[7] = gpt_answers_m[7][0]
# gpt_answers_backup = gpt_answers_m
# # get_text_answer(gpt_answers_m[6])
# gpt_answers_m[7] =  gpt_complete(
#     questions_m[7], 
#     cot_scaffolded_prompt_mult, 
#     "\n\nLet's take it step by step and hypothesize what the pattern could be.",
#     max_tokens = 500,
#     temperature = 0
# )
```

```{python}
print("Accuracy (base):", np.mean(df2.base_acc))
print("Accuracy (fewshot):", np.mean(df2.few_acc))
print("Accuracy (COT):", np.mean(df2.cot_acc))
```

# Two 2nd-order relations

```{python}
## create datasets

def make_matrices(n, rng, func, **kwargs):
    matrices = list()

    for i in range(0, n):

        vals = rng.integers(0, 20, 3).T #(-, 9, 3)
        s1 = rng.integers(1, 6, 3).T # ( 1, 5, 3)
        s2 = rng.integers(2, 4) # (1, 3)
        
        m = func(vals, s1, s2, **kwargs)
        matrices.append(m)

    return(matrices)

x = make_matrices(500, rng, make_np_matrix_2ndorder_mult)
y = make_matrices(500, rng, make_np_matrix_2ndorder)
x_means = [np.mean(i) for i in x]
y_means = [np.mean(i) for i in y]

import seaborn as sns

z = pd.DataFrame({"x": x_means, "y": y_means})

sns.boxplot(z[["x", "y"]])
```

my code as-is seems to produce fairly similar numbers across the problem types, so the tokens themselves won't be a surface-level cue

```{python}
import random

## need a new prompt that works for both types
## and a randomized examples prompt

## and then create a dataset with examples of each, with similar ranges of values / other surface features as similar as possible

## if can show high performance, that's pretty cool

rng = np.random.default_rng(12345)

n_questions = 50

def generate_qa(n, rng):
    questions = list()
    questions_basic = list()
    answers = list()
    complete = list()

    for i in range(0, n):

        vals = rng.integers(0, 20, 3).T #(-, 9, 3)
        s1 = rng.integers(1, 9, 3).T # ( 1, 5, 3)
        s2 = rng.integers(1, 4) # (1, 3)
        
        m = make_np_matrix_2ndorder(vals, s1, s2)
        
        complete.append(format_digit_matrix(m, None))
        questions.append(format_digit_matrix(m, "[ ? ]"))
        questions_basic.append(format_digit_matrix(m, "["))
        answers.append(str(m[-1, -1]))

    return(questions, questions_basic, answers, complete)


def generate_qa_mult(n, rng):
    questions = list()
    questions_basic = list()
    answers = list()
    complete = list()

    for i in range(0, n):

        vals = rng.integers(0, 20, 3).T #(-, 9, 3)
        s1 = rng.integers(1, 6, 3).T # ( 1, 5, 3)
        s2 = rng.integers(2, 4) # (1, 3)
        
        m = make_np_matrix_2ndorder_mult(vals, s1, s2)
        
        complete.append(format_digit_matrix(m, None))
        questions.append(format_digit_matrix(m, "[ ? ]"))
        questions_basic.append(format_digit_matrix(m, "["))
        answers.append(str(m[-1, -1]))

    return(questions, questions_basic, answers, complete)


questions_add, questions_basic_add, answers_add, complete_add = generate_qa(n_questions, rng)
questions_m, questions_basic_m, answers_m, complete_m = generate_qa_mult(n_questions, rng)

questions = questions_add + questions_m
questions_basic = questions_basic_add + questions_basic_m 
answers = answers_add + answers_m 

examples_m = generate_qa_mult(16, np.random.default_rng(1351))[3]
examples_add = generate_qa(16, np.random.default_rng(131))[3]
examples = examples_m + examples_add 
random.shuffle(examples)

examples_prompt = make_examples_prompt(examples)
```

```{python}
gpt_answers_basic = gpt_complete(
    questions_basic, 
    "",
    # cot_scaffolded_prompt, 
    # "\n\nLet's take it step by step and hypothesize what the pattern could be.",
    max_tokens = 12,
    stop = ["]", "\n"],
    temperature = 0
)
```

```{python}
gpt_answers_examples = gpt_complete(
    questions_basic, 
    examples_prompt,
    # cot_scaffolded_prompt, 
    # "\n\nLet's take it step by step and hypothesize what the pattern could be.",
    max_tokens = 12,
    stop = ["]", "\n"],
    temperature = 0
)
```

```{python}
# cot_scaffolded_prompt_mult = "Let's play a pattern-matching quiz game meant to test your ability to reason about relationships and make analogies. They might seem tricky but all of the questions can be answered from the information provided, so give an answer.\n\nQ: Based on the pattern in the matrix below, what number would best complete the pattern in the place of the \nquestion mark?\n\n[ 4 ] [ 6 ] [ 10 ] [ 18 ]\n[ 16 ] [ 20 ] [ 28 ] [ 44 ]\n[ 11 ] [ 13 ] [ 17 ] [ ? ]\n\nLet's take it step by step and hypothesize what the pattern could be.\n\n- In the first row, 6 - 4 = 2, 10 - 6 = 4, and 18 - 10 = 8, so the summands are 2, 4, and 8, multiplying by two each time.\n- In the second row, 20 - 16 = 4, 28 - 20 = 8, 44 - 28 = 16, so the summands are 4, 8 and 6, again multiplying by two each time.\n- In the third row, 13 - 11 = 2, 17 - 13 = 4, so the first two summands are 2 and 4. If they multiply by two each time, the last summand is 8.\n\nWe take the third column of third row and add the final summand to calculate 17 + 8 = 25\nA: 25\n\n"
# cot_scaffolded_prompt_both = "Let's play a pattern-matching quiz game meant to test your ability to reason about relationships and make analogies.\n\nQ: Based on the pattern in the matrix below, what number would best complete the pattern in the place of the question mark?\n\n[ 4 ] [ 6 ] [ 10 ] [ 18 ]\n[ 16 ] [ 20 ] [ 28 ] [ 44 ]\n[ 11 ] [ 13 ] [ 17 ] [ ? ]\n\nLet's take it step by step and hypothesize what the pattern could be.\n\n- In the first row, 6 - 4 = 2, 10 - 6 = 4, and 18 - 10 = 8. The summands are 2, 4, and 8. 4 - 2 = 2 and 8 - 4 = 4, so there's no consistent additive pattern here. However, 4/2 = 2 and 8/4= 2, so each is multiplied by 2.\n- In the second row, 20 - 16 = 4, 28 - 20 = 8, 44 - 28 = 16. The summands are 4, 8 and 16, again multiplying by 2 each time.\n- In the third row, 13 - 11 = 2, 17 - 13 = 4, so the first two summands are 2 and 4. If they multiply by 2 each time, the last summand is 8.\n\nWe take the third column of third row and add the final summand to calculate 17 + 8 = 25.\n\nA: 25\n\nQ: Based on the pattern in the matrix below, what number would best complete the pattern in the place of the question mark?\n\n[ 1 ] [ 3 ] [ 6 ] [ 10 ]\n[ 2 ] [ 3 ] [ 5 ] [ 8 ]\n[ 1 ] [ 2 ] [ 4 ] [ ? ]\n\nLet's take it step by step and hypothesize what the pattern could be.\n\n- In the first row, 3 - 1 = 2, 6 - 3 =3, and 10-6 = 4. The summands are 2, 3, and 4. 3 - 2 = 1 and 4 - 3 = 1, so there is a consistent additive change, increasing by 1 each time.\n- In the second row, 3 -2 = 1, 5 - 3 = 2, 8-5 = 3. The summands are 1, 2, and 3, again increasing by one each time.\n- In the third row, 2 - 1 =1, 4 - 2 = 2. The summands are 1, 2. If they are increasing by one each time, then and 2 + 1 = 3, so the third summand is equal to 3.\n\nWe take the third column of third row and add the third summand, to calculate that 3 + 4 = 7.\n\nA: 7\n\nQ: Based on the pattern in the matrix below, what number would best complete the pattern in the place of the question mark?\n\n[ 4 ] [ 10 ] [ 19 ] [ 31 ]\n[ 3 ] [ 8 ] [ 16 ] [ 27 ]\n[ 4 ] [ 12 ] [ 23 ][ ? ]\n\nLet's take it step by step and hypothesize what the pattern could be.\n\n- In the first row, 10 - 4 = 6, 19 - 10 = 9, and 31 - 19 = 12. The summands are 6, 9, and 12. 9 - 6 = 3 and 12 - 9 = 3, so there is a consistent additive change, increasing by 3 each time.\n- In the second row, 8 - 3 = 5, 16 - 8 = 8, 27 - 16 = 11. The summands are 5, 8, and 11, again increasing by 3 each time.\n- In the third row, 12 - 4 = 8, 23 - 12 = 11. The summands are 8 and 11. If they are increasing by 3 each time, then 11 + 3 = 14, so the third summand is equal to 14.\n\nWe take the third column of third row and add the third summand, to calculate that 23 + 14 = 37.\n\nA: 37\n\nQ: Based on the pattern in the matrix below, what number would best complete the pattern in the place of the question mark?\n\n"
cot_scaffolded_prompt_both = "Q: What number would best complete the pattern in the place of the question mark?\n\n[ 4 ] [ 6 ] [ 10 ] [ 18 ]\n[ 16 ] [ 20 ] [ 28 ] [ 44 ]\n[ 11 ] [ 13 ] [ 17 ] [ ? ]\n\nLet's take it step by step.\n\nRow 1: 6 - 4 = 2, 10 - 6 = 4, and 18 - 10 = 8. The summands are 2, 4, and 8. 4 - 2 = 2 and 8 - 4 = 4, so there is no consistent additive pattern. However, 4/2 = 2 and 8/4= 2, so each is multiplied by 2.\nRow 2: 20 - 16 = 4, 28 - 20 = 8, 44 - 28 = 16. The summands are 4, 8 and 16, again multiplying by 2 each time.\nRow 3: 13 - 11 = 2, 17 - 13 = 4, so the first two summands are 2 and 4. If they multiply by 2 each time, the last summand is 8.\n\nWe calculate 17 + 8 = 25.\n\nA: 25\n\nQ: What number would best complete the pattern in the place of the question mark?\n\n[ 1 ] [ 3 ] [ 6 ] [ 10 ]\n[ 2 ] [ 3 ] [ 5 ] [ 8 ]\n[ 1 ] [ 2 ] [ 4 ] [ ? ]\n\nLet's take it step by step.\n\nRow 1: 3 - 1 = 2, 6 - 3 =3, and 10-6 = 4. The summands are 2, 3, and 4. 3 - 2 = 1 and 4 - 3 = 1, so there is a consistent additive change, increasing by 1 each time.\nRow 2: 3 -2 = 1, 5 - 3 = 2, 8-5 = 3. The summands are 1, 2, and 3, again increasing by one each time.\nRow 3: 2 - 1 =1, 4 - 2 = 2. The summands are 1, 2. If they are increasing by one each time, then and 2 + 1 = 3, so the third summand is equal to 3.\n\nWe calculate 3 + 4 = 7.\n\nA: 7\n\nQ: What number would best complete the pattern in the place of the question mark?\n\n[ 4 ] [ 10 ] [ 19 ] [ 31 ]\n[ 3 ] [ 8 ] [ 16 ] [ 27 ]\n[ 4 ] [ 12 ] [ 23 ][ ? ]\n\nLet's take it step by step.\n\nRow 1: 10 - 4 = 6, 19 - 10 = 9, and 31 - 19 = 12. The summands are 6, 9, and 12. 9 - 6 = 3 and 12 - 9 = 3, so there is a consistent additive change, increasing by 3 each time.\nRow 2: 8 - 3 = 5, 16 - 8 = 8, 27 - 16 = 11. The summands are 5, 8, and 11, again increasing by 3 each time.\nRow 3: 12 - 4 = 8, 23 - 12 = 11. The summands are 8 and 11. If they are increasing by 3 each time, then 11 + 3 = 14, so the third summand is equal to 14.\n\nWe calculate 23 + 14 = 37.\n\nA: 37\n\nQ: Based on the pattern in the matrix below, what number would best complete the pattern in the place of the question mark?\n\n[ 1 ] [ 2 ] [ 5 ] [ 14 ]\n[ 2 ] [ 4 ] [ 10 ] [ 28 ]\n[ 10 ] [ 11 ] [ 14 ][ ? ]\n\nLet's take it step by step.\n\nRow 1: 2 - 1 = 1, 5 - 2 = 3, and 14 - 5 = 9. The summands are 1, 3, and 9. 3 - 1 = 2 and 9 - 3 = 6, so there is no there is no consistent additive pattern. However,  3/1 = 3 and 9/3 = 3, so each is multiplied by 3.\nRow 2: 4 - 2 = 2, 10 - 4 = 6, and 28 - 10 = 18. The summands are 2, 6, and 18, again multiplying by 3 each time.\nRow 3: 11 - 10 = 1, 14 - 11 = 3. The summands are 1 and 3. If they multiply by 3 each time, the last summand is 9.\n\nWe calculate 14 + 9 = 23.\n\nA: 23\n\nQ: Based on the pattern in the matrix below, what number would best complete the pattern in the place of the question mark?\n\n"

gpt_answers = gpt_complete(
    questions, 
    cot_scaffolded_prompt_both, 
    "\n\nLet's take it step by step and hypothesize what the pattern could be.",
    max_tokens = 300,
    temperature = 0
)
```

```{python}
# print([get_text_answer(a) for a in gpt_answers])
# print(answers[55:60])
```

```{python}
df = pd.DataFrame(
    { 
        "matrix": questions,
        "answer": answers,
        "gpt_cot": [get_text_answer(a) for a in gpt_answers],
        "gpt_base": [a for a in gpt_answers_basic],
        "gpt_fewshot": [a for a in gpt_answers_examples]
    }
)

df = df.assign(cot_acc = df.answer == df.gpt_cot, base_acc = df.answer == df.gpt_base, few_acc = df.answer == df.gpt_fewshot)

df
```

```{python}
print("Accuracy (base):", np.mean(df.base_acc))
print("Accuracy (fewshot):", np.mean(df.few_acc))
print("Accuracy (COT):", np.mean(df.cot_acc))
```

```{python}
print("Accuracy (base):", np.mean(df.base_acc[0:50]))
print("Accuracy (fewshot):", np.mean(df.few_acc[0:50]))
print("Accuracy (COT):", np.mean(df.cot_acc[0:50]))

print("Accuracy (base):", np.mean(df.base_acc[50:]))
print("Accuracy (fewshot):", np.mean(df.few_acc[50:]))
print("Accuracy (COT):", np.mean(df.cot_acc[50:]))
```



```{python}

import pandas as pd
import json

## read social iq jsonl file
with open("social-iqa-dev.jsonl", "r") as f:
    socialiq = [json.loads(line) for line in f.readlines()]

## make this a pandas dataframe with zip
## variables are: context, question, answerA, answerB, answerC
socialiq = pd.DataFrame(
    list(zip(
        [x["context"] for x in socialiq],
        [x["question"] for x in socialiq],
        [x["answerA"] for x in socialiq],
        [x["answerB"] for x in socialiq],
        [x["answerC"] for x in socialiq]
    )),
    columns = ["context", "question", "answerA", "answerB", "answerC"]
)

## read nad join with the labels from social-iqa-dev-labels.lst
socialiq_labels = pd.read_csv("social-iqa-dev-labels.lst", sep = "\t", header = None, names = ["label"])

## now add this column to the socialiq dataframe
socialiq = socialiq.assign(label = socialiq_labels.label)

## recode labels 1, 2, 3 to A, B, C
socialiq = socialiq.assign(label = socialiq.label.replace({1: "A", 2: "B", 3: "C"}))
```